EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
noname.exe_ -- emu8086 assembler version: 4.08  
 
[ 2/2/2024  --  6:29:09 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 100H
[   3]        :                                       
[   4]        :                                       .data
[   5]    0100: 00                                    x DB ?
[   6]    0101: 23                                    block db '#'
[   7]    0102: 50 6C 65 61 73 65 20 65 6E 74 65 72   input_promt DW "Please enter the number of lines (1-9): $"
                20 74 68 65 20 6E 75 6D 62 65 72 20 
                6F 66 20 6C 69 6E 65 73 20 28 31 2D 
                39 29 3A 20 24 00                   
[   8]    012C: 54 68 65 20 72 65 76 65 72 73 65 20   output_message DW "The reverse triangle:", 10, 13, "$"
                74 72 69 61 6E 67 6C 65 3A 00 0A 00 
                0D 00 24 00                         
[   9]    0148: 49 6E 76 61 6C 69 64 20 69 6E 70 75   invalid_message DW "Invalid input! Cannot create a triangle.$"
                74 21 20 43 61 6E 6E 6F 74 20 63 72 
                65 61 74 65 20 61 20 74 72 69 61 6E 
                67 6C 65 2E 24 00                   
[  10]        :                                       
[  11]        :                                       .code
[  12]        :                                       
[  13]    0180:                                       main PROC
[  14]    0180: B8 10 00                              MOV AX, @data
[  15]    0183: 8E D8                                 MOV DS, AX
[  16]        :                                       
[  17]        :                                       ; Taking user input
[  18]    0185: B4 09                                 MOV AH, 9
[  19]    0187: BA 02 00                              LEA DX, input_promt
[  20]    018A: CD 21                                 INT 21H
[  21]    018C: B4 01                                 MOV AH, 1
[  22]    018E: CD 21                                 INT 21h
[  23]    0190: 2C 30                                 SUB AL, '0'
[  24]    0192: A2 00 00                              MOV x, AL
[  25]        :                                       
[  26]        :                                       ; Printing new-line
[  27]    0195: B4 02                                 MOV AH, 2
[  28]    0197: B2 0A                                 MOV DL, 10
[  29]    0199: CD 21                                 INT 21H
[  30]    019B: B2 0D                                 MOV DL, 13
[  31]    019D: CD 21                                 INT 21H
[  32]        :                                       
[  33]        :                                       ; Checking for invalid input
[  34]    019F: 80 3E 00 00 01                        CMP x, 1
[  35]    01A4: 7C 09                                 JL invalid
[  36]    01A6: 80 3E 00 00 09                        CMP x, 9
[  37]    01AB: 7F 02                                 JG invalid
[  38]    01AD: EB 09                                 JMP create_triangle
[  39]        :                                       
[  40]    01AF:                                       invalid:
[  41]    01AF: B4 09                                 MOV AH, 9
[  42]    01B1: BA 48 00                              LEA DX, invalid_message
[  43]    01B4: CD 21                                 INT 21H
[  44]    01B6: EB 2F                                 JMP exit
[  45]        :                                       
[  46]    01B8:                                       create_triangle:
[  47]        :                                       ; Printing output message
[  48]    01B8: B4 09                                 MOV AH, 9
[  49]    01BA: BA 2C 00                              LEA DX, output_message
[  50]    01BD: CD 21                                 INT 21H
[  51]        :                                       
[  52]        :                                       ; Initialize outer loop counter
[  53]    01BF: B3 00                                 MOV BL, 0
[  54]        :                                       
[  55]    01C1:                                       outer_loop: ; using while loop
[  56]    01C1: 3A 1E 00 00                           CMP BL, x
[  57]    01C5: 74 20                                 JE exit
[  58]        :                                       
[  59]        :                                       ; Printing new-line
[  60]    01C7: B4 02                                 MOV AH, 2
[  61]    01C9: B2 0A                                 MOV DL, 10
[  62]    01CB: CD 21                                 INT 21H
[  63]    01CD: B2 0D                                 MOV DL, 13
[  64]    01CF: CD 21                                 INT 21H
[  65]        :                                       
[  66]        :                                       ; Initialize inner loop counter
[  67]    01D1: B5 00                                 MOV CH, 0
[  68]    01D3: 8A 0E 00 00                           MOV CL, x
[  69]    01D7: 2A CB                                 SUB CL, BL
[  70]        :                                       
[  71]    01D9:                                       inner_loop:
[  72]        :                                       
[  73]        :                                       ; Print a single character
[  74]    01D9: B4 02                                 MOV AH, 2
[  75]    01DB: 8A 16 01 00                           MOV DL, block
[  76]    01DF: CD 21                                 INT 21H
[  77]        :                                       
[  78]    01E1: E2 F6                                 LOOP inner_loop
[  79]        :                                       
[  80]        :                                       ; Increment outer loop counter
[  81]    01E3: FE C3                                 INC BL
[  82]    01E5: EB DA                                 JMP outer_loop
[  83]        :                                       
[  84]    01E7:                                       exit:
[  85]    01E7: B4 4C                                 MOV AH, 4CH
[  86]    01E9: CD 21                                 INT 21H
[  87]        :                                       main ENDP
[  88]        :                                       END main
[  89]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: EB      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 3F      -   check sum (l.byte)
0013: 98      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 18      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 18      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
