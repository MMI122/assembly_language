EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
noname.com_ -- emu8086 assembler version: 4.08  
 
[ 2/16/2024  --  8:27:39 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       
[   2]        :                                       ; You may customize this and other start-up templates;
[   3]        :                                       ; The location of this template is c:\emu8086\inc\0_com_template.txt
[   4]        :                                       
[   5]        :                                       org 100h
[   6]        :                                       
[   7]        :                                       ; add your code here
[   8]    0100: EB 40                                 .data
[   9]    0102: 45 6E 74 65 72 20 64 69 76 69 73 6F   str1 db "Enter divisor$"
                72 24                               
[  10]    0110: 0D 0A 45 6E 74 65 72 20 64 69 76 69   str2 db 13,10,"Enter dividend$"
                64 65 6E 64 24                      
[  11]    0121: 0D 0A 51 75 6F 74 69 65 6E 74 20 69   str3 db 13,10,"Quotient is$"
                73 24                               
[  12]    012F: 0D 0A 52 65 6D 61 69 6E 64 65 72 20   str4 db 13,10,"Remainder is$"
                69 73 24                            
[  13]    013E: 00                                    divisor db ?
[  14]    013F: 00                                    dividend db ?
[  15]    0140: 00 00                                 result dw ?
[  16]    0142:                                       .code
[  17]    0142:                                       main proc
[  18]    0142: 8C C8                                 mov ax,@data
[  19]    0144: 8E D8                                 mov ds,ax
[  20]        :                                       
[  21]        :                                       
[  22]        :                                       
[  23]    0146: BA 02 01                              lea dx,str1
[  24]    0149: E8 4B 00                              call puts
[  25]    014C: E8 4D 00                              call getche
[  26]    014F: E8 4F 00                              call atoi
[  27]    0152: A2 3E 01                              mov [divisor],al
[  28]        :                                       
[  29]        :                                       
[  30]        :                                       
[  31]    0155: BA 10 01                              lea dx,str2
[  32]    0158: E8 3C 00                              call puts
[  33]    015B: E8 3E 00                              call getche
[  34]    015E: E8 40 00                              call atoi
[  35]    0161: A2 3F 01                              mov [dividend],al
[  36]        :                                       
[  37]        :                                       
[  38]        :                                       
[  39]    0164: E8 23 00                              call find_quot_rem
[  40]        :                                       
[  41]        :                                       
[  42]        :                                       
[  43]        :                                       
[  44]        :                                       
[  45]        :                                       
[  46]        :                                       
[  47]    0167: BA 21 01                              lea dx,str3
[  48]    016A: E8 2A 00                              call puts
[  49]    016D: 8A 16 40 01                           mov dl,byte ptr result[0]
[  50]    0171: E8 30 00                              call itoa
[  51]    0174: E8 31 00                              call putchar  ;to dispaly character
[  52]        :                                       
[  53]        :                                       
[  54]        :                                       
[  55]    0177: BA 2F 01                              lea dx,str4
[  56]    017A: E8 1A 00                              call puts
[  57]    017D: 8A 16 41 01                           mov dl,byte ptr result[1]
[  58]    0181: E8 20 00                              call itoa
[  59]    0184: E8 21 00                              call putchar
[  60]        :                                       
[  61]    0187: E8 23 00                              call exit
[  62]        :                                       endp
[  63]        :                                       
[  64]        :                                       
[  65]        :                                       
[  66]    018A:                                       proc find_quot_rem
[  67]        :                                       
[  68]    018A: B4 00                                 mov ah,0
[  69]    018C: A0 3F 01                              mov al,[dividend]
[  70]    018F: F6 36 3E 01                           div [divisor]
[  71]    0193: A3 40 01                              mov [result],ax
[  72]    0196: C3                                    ret
[  73]        :                                       find_quot_rem endp
[  74]        :                                       
[  75]        :                                       
[  76]        :                                       
[  77]        :                                       
[  78]        :                                       
[  79]    0197:                                       puts proc
[  80]    0197: B4 09                                 mov ah,09h
[  81]    0199: CD 21                                 int 21h
[  82]    019B: C3                                    ret
[  83]        :                                       puts endp
[  84]        :                                       
[  85]        :                                       
[  86]    019C:                                       getche proc
[  87]    019C: B4 01                                 mov ah,01h
[  88]    019E: CD 21                                 int 21h
[  89]    01A0: C3                                    ret
[  90]        :                                       getche endp
[  91]        :                                       
[  92]        :                                       
[  93]        :                                       
[  94]    01A1:                                       atoi proc
[  95]    01A1: 2C 30                                 sub al,'0'
[  96]    01A3: C3                                    ret
[  97]        :                                       atoi endp
[  98]        :                                       
[  99]        :                                       
[ 100]        :                                       
[ 101]        :                                       
[ 102]        :                                       
[ 103]    01A4:                                       itoa proc
[ 104]    01A4: 83 C2 30                              add dx,'0'
[ 105]    01A7: C3                                    ret
[ 106]        :                                       itoa endp
[ 107]        :                                       
[ 108]        :                                       
[ 109]        :                                       
[ 110]        :                                       
[ 111]    01A8:                                       putchar proc
[ 112]    01A8: B4 02                                 mov ah,02h
[ 113]    01AA: CD 21                                 int 21h
[ 114]    01AC: C3                                    ret
[ 115]        :                                       putchar endp
[ 116]        :                                       
[ 117]        :                                       
[ 118]        :                                       
[ 119]        :                                       
[ 120]        :                                       
[ 121]    01AD:                                       exit proc
[ 122]    01AD: B4 4C                                 mov ah,4ch
[ 123]    01AF: CD 21                                 int 21h
[ 124]    01B1: C3                                    ret
[ 125]        :                                       exit endp
[ 126]        :                                       
[ 127]        :                                       end main
[ 128]        :                                       
[ 129]        :                                       
[ 130]        :                                       
[ 131]        :                                       
[ 132]        :                                       
[ 133]        :                                       
[ 134]        :                                       
[ 135]        :                                       
[ 136]        :                                       
[ 137]        :                                       
[ 138]        :                                       
 
===================================================================================================
 




===================================================================================================
